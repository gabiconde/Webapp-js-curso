Client side -> carrega no navegador arquivos estaticos armazenados nos servidor web
    --> recebe e executa os arq.
-> web server (atende requisições web http / hospeda)
    --> recebe request
    --> Apache, ngix, tomcat, glassfish
    --> todos servidores web atendem e mandam para o backend
    --> envia response
-> backend (python, node..)
-> database


---------------------------------------------------------- HTML
-> Estrutura 
-> tags(elementos)
-> semantica ainformação/ acessibilidade
-> nome da tag e TAB 
    -->  ul>li*6 + TAB
    --> ul#lista>li.item{item $}*6 +TAB

<svg> vetores
----------------------------------------------------------- CSS
-> Estilo / animaçoes 
-> busca por class, tag, id (seletores)
    --> tag -- h1{

    }
    --> id -- #titulo{

    }
    --> class -- .titulo{

    }



----------------------------------------------------------- JAVASCRIPT
 -> logica

1- Localizar elemento que sofrerá a ação
2- Gatilho para execução(Evento) - click, digitar...
3- Lógica (function) funcionalidade

onclick="console.log(this.remove())" -- apaga o elemento
this.parentElement --> pega o elemento pai


Objeto - reperesentçaõ do mundo real

DOM - Document Object Model (meio campo entre js e HTML)
    --> feito pelo navegador
    --> Todos elementos html são intepretados como objetos

document. --> para o js é o html

---- Seletores css pelo js
document.querySelector('tag')
document.querySelector('#id')
document.querySelector('.Nomeclass')

---- É carregado quando carrega o html e em eventos

---- pegar valor de class
let orientacao = document.querySelector('.mural');
        --> querySelector busca o primeiro que possui o seletor
        --> utilizar querySelectorAll retorna uma lista de todos que possuem
        --> acessar com for


orientacao.classList 
        --> traz a lista de nomes de classes
        --> classList.add or .toggle etc.. alterar esse array de class

innerText 
        --> mostra apenas o texto

onclick="this.parentElement.parentElement.remove()"
        --> dentro do html 
        --> parentElement acessa o elemento pai do <button> por exemplo

css:

.opcoesDoCartao-opcao{
    pointer-events: none;
	opacity: 0;
	transition: opacity .3s;
}
        --> retira os eventos do javascript


.cartao--focado .opcoesDoCartao-opcao,
.cartao:hover .opcoesDoCartao-opcao{
	pointer-events: auto;
	opacity: 1;

}
        --> é criada a classe (.cartao--focado e .cartao:hover quando tocado)
        --> Esse quando utilizados alteram a classe .opcoesDoCartao-opcao

js:

cartao.addEventListener('change', function(event){
    const elementoCor = event.target
    const radio =  elementoCor.classList.contains('opcoesDoCartao-radioTipo')
    if (radio){
        cartao.style.backgroundColor = elementoCor.value
    }

})

        --> change é o evento disparado quando algum input é alterado
        --> acessando o evento vemos quem o emitiu (event.target) -- com bubble ele chega ate o article
        --> event.target.value  value do html
        --> cartao.style.backgroundColor = event.target.value  
            --> atribui ao html um style.
        --> const radio =  elementoCor.classList.contains('opcoesDoCartao-radioTipo')
            --> valida se é o input que queremos pela classe

insertAdjacentelement
'beforeBegin', 'afterBegin', 'beforeEnd', or 'afterEnd'.  

innerHTML com `` 

Para fazer a tradução e criar arq de prod
./node_modules/.bin/babel src --out-dir dist --copy-files --watch --preset @babel/preset-env